{"version":3,"sources":["components/Chart.js","components/NavBar.js","components/Line.js","App.js","components/form.js","serviceWorker.js","index.js"],"names":["Chart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","react_default","a","createElement","className","es","data","options","title","display","displayTitle","text","fontSize","legend","displayLegend","position","legendPosition","Component","defaultProps","location","NavBar","react_router_dom","to","LineChart","lineData","responsive","hoverMode","stacked","scales","yAxes","type","id","gridLines","drawOnChartArea","App","React","savingsGoal","updateSavingsGoal","bind","assertThisInitialized","getLineData","getChartData","setState","labels","datasets","label","backgroundColor","borderColor","fill","yAxis","e","console","log","target","value","prevProps","prevState","components_NavBar","onSubmit","defaultValue","Line","components_Chart","Boolean","window","hostname","match","ReactDOM","render","react_router","path","component","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1042acd0.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Bar} from 'react-chartjs-2';\n\nclass Chart extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            chartData: props.chartData\n        }\n\n    }\n\n    static defaultProps = {\n        displayTitle: true,\n        displayLegend: true,\n        legendPosition: 'right',\n        location: 'City'\n    }\n\n    render(){\n        return (\n            <div className=\"Chart\">\n                <Bar\n                    data={this.state.chartData}\n                    options={{\n                        title: {\n                            display: this.props.displayTitle,\n                            text: \"You v.s. Average American Coffee Spending/week\",\n                            fontSize: 25\n                        },\n                        legend: {\n                            display: this.props.displayLegend,\n                            position: this.props.legendPosition\n\n                        }\n                    }}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Chart;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction NavBar() {\n    return (\n        <nav className=\"navbar navbar-dark bg-primary fixed-top\">\n            <Link className=\"navbar-brand\" to=\"/\">\n                BEtech Personal Spending Habits\n\n            </Link>\n        </nav>\n    );\n}\n\nexport default NavBar;","import React, {Component} from 'react';\nimport { Line } from 'react-chartjs-2';\n\nclass LineChart extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            lineData: props.lineData\n        }\n        // console.log(this.state.lineData)\n    }\n\n    // static defaultProps = {\n    //     displayTitle: true,\n    //     displayLegend: true,\n    //     legendPosition: 'right',\n    //     location: 'City'\n    // }\n\n    render(){\n        // console.log(this.state.lineData)\n        return (\n            <div className=\"lineChart\">\n                <Line\n                    data={this.state.lineData}\n                    options={{\n                        responsive: true,\n                        hoverMode: 'index',\n                        stacked: false,\n                        title: {\n                            display: true,\n                            text: 'You v.s. Your Savings Goal',\n                            fontSize: 30\n                        },\n                        scales: {\n                            yAxes: [{\n                                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n                                display: true,\n                                position: 'left',\n                                id: 'y-axis-1',\n                            }, {\n                                type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance\n                                display: true,\n                                position: 'right',\n                                id: 'y-axis-2',\n                                // grid line settings\n                                gridLines: {\n                                    drawOnChartArea: false, // only want the grid lines for one axis to show up\n                                },\n                            }],\n                        }\n                    }}\n                />\n            </div>\n        )\n    }\n}\n\nexport default LineChart;","import React, {Component} from 'react';\nimport './App.css';\nimport Chart from './components/Chart';\nimport NavBar from './components/NavBar';\nimport LineChart from './components/Line';\nimport Form from './components/form';\n\nclass App extends Component{\n\n    constructor(){\n        super();\n        this.state = {\n            chartData: {},\n            lineData: {},\n            savingsGoal: 28\n        }\n        this.updateSavingsGoal = this.updateSavingsGoal.bind(this);\n    }\n\n    componentWillMount(){\n        this.getLineData()\n        this.getChartData()\n    }\n\n    getChartData(){\n\n        // Ajax calls here\n        this.setState({\n            chartData: {\n                labels: ['You', 'Average American'],\n                datasets: [\n                    {\n                        label: 'Dollars',\n                        data: [\n                            24,\n                            91,\n                        ],\n                        backgroundColor: [\n                            'rgba(255, 99, 132, 0.6)',\n                            'rgba(54, 162, 235, 0.6)',\n                        ]\n                    }\n\n                ]\n            }\n        });\n    }\n\n    getLineData(){\n\n        this.setState({\n            lineData: {\n                labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n                datasets: [{\n                    label: 'My Savings Goal',\n                    borderColor: 'rgba(255, 99, 132, 0.6)',\n                    backgroundColor: 'rgba(255, 99, 132, 0.6)',\n                    fill: false,\n                    data: [\n                        4,\n                        8,\n                        12,\n                        16,\n                        20,\n                        24,\n                        28\n                    ],\n                    yAxis: 'y-axis-1',\n                }, {\n                    label: 'My Savings So far',\n                    borderColor: 'rgba(54, 162, 235, 0.6)',\n                    backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                    fill: false,\n                    data: [\n                        0,\n                        0,\n                        4\n                        // 8,\n                        // 8,\n                        // 8,\n                        // 12\n                    ],\n                    yAxis: 'y-axis-2'\n                }]\n            }\n        });\n    }\n\n    updateSavingsGoal(e) {\n        console.log(\"HAAAAAA\");\n        console.log(e.target[0].value);\n        // console.log(e.target.getAttribute('input'));\n        // const value = parseInt(e.target.value, 10);\n        this.setState({\n            savingsGoal: e.target[0].value,\n            lineData: {\n                labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n                datasets: [{\n                    label: 'My Savings Goal',\n                    borderColor: 'rgba(255, 99, 132, 0.6)',\n                    backgroundColor: 'rgba(255, 99, 132, 0.6)',\n                    fill: false,\n                    data: [\n                        e.target[0].value,\n                        e.target[0].value,\n                        12,\n                        16,\n                        20,\n                        24,\n                        28\n                    ],\n                    yAxis: 'y-axis-1',\n                }, {\n                    label: 'My Savings So Far',\n                    borderColor: 'rgba(54, 162, 235, 0.6)',\n                    backgroundColor: 'rgba(54, 162, 235, 0.6)',\n                    fill: false,\n                    data: [\n                        0,\n                        0,\n                        4,\n                        8,\n                        8,\n                        8,\n                        12\n                    ],\n                    yAxis: 'y-axis-2'\n                }]\n            }}, () => {console.log(\"WHAT THE FUCK\")});\n        console.log(\"SAVINGS GOAL UPDATED\");\n        console.log(this.state.savingsGoal);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        console.log(\n            `this.state.clickCounts(♻️ componentDidUpdate)`,\n\n            \"UPDATED TO\" + this.state.savingsGoal\n        );\n    }\n\n    render() {\n        // console.log(this.state.lineData)\n        // console.log(this.state.savingsGoal)\n        console.log(this.state.savingsGoal);\n        return (\n            <div className=\"App\">\n                {/*<header className=\"App-header\">*/}\n                    {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\n                {/*</header>*/}\n                <NavBar/>\n                {/*<Form2/>*/}\n                {/*<input type = \"text\" value = {this.state.savingsGoal}*/}\n                       {/*onChange = {this.updateSavingsGoal} />*/}\n\n                <form onSubmit={this.updateSavingsGoal}>\n                    <label>SavingsGoal  </label>\n                    <input type = \"text\" defaultValue={this.state.savingsGoal}/>\n                    <button>Send data!</button>\n                </form>\n\n                <h4>{this.state.savingsGoal}</h4>\n\n                <LineChart lineData={this.state.lineData}/>\n                <Chart chartData={this.state.chartData} location=\"Massachusetts\" legendPosition={\"bottom\"}/>\n            </div>\n        );\n\n    }\n}\n\n// class Form2 extends React.Component {\n//     constructor(props) {\n//         super(props);\n//\n//         this.state = {\n//             data: 'Savings Goal...'\n//         }\n//         this.updateState = this.updateState.bind(this);\n//     };\n//     updateState(e) {\n//         this.setState({data: e.target.value});\n//     }\n//     render() {\n//         return (\n//             <div>\n//                 <input type = \"text\" value = {this.state.data}\n//                        onChange = {this.updateState} />\n//                 <h4>{this.state.data}</h4>\n//             </div>\n//         );\n//     }\n// }\n\nexport default App;\n","import React, {Component} from 'react';\n\nclass Form extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: 'Savings Goal...'\n        }\n        this.updateState = this.updateState.bind(this);\n    };\n    updateState(e) {\n        this.setState({data: e.target.value});\n    }\n    render() {\n        return (\n            <div>\n                <input type = \"text\" value = {this.state.data}\n                       onChange = {this.updateState} />\n                {/*<h4>{this.state.data}</h4>*/}\n            </div>\n        );\n    }\n}\n\nexport default Form;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        {/*<App />*/}\n        <Switch>\n            <Route path={\"/\"} component={App} exact/>\n            <Route path=\"/results\" component={App} exact/>\n        </Switch>\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}